# -*- coding: utf-8 -*-
""""Практика №2"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XMlDNXBY0W5etsVLAnz2Zstdl5Wu7H4t

# Практика №2

1. Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры список целых чисел. Вывести в консоль, затем перевернуть его и снова вывести в консоль.

2. Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры два списка целых чисел. Вывести их в консоль. Создать новый пустой список. Добавить в него все четные (по индексу) элементы первого списка и все нечетные (по индексу) элементы второго списка. Вывести третий список в консоль.

3. Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры список произвольных элементов (целые числа, числа с плавающей точкой, строки). Вывести в консоль. Убрать из него все дубликаты через приведение типов. Вывести в консоль.

4. Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры словарь, где ключом является строка, значением — целое число или число с плавающей точкой. Вывести в консоль. Для всех уникальных значений создать кортеж, где первым элементом будет значение, вторым — список связанных с ним ключей. Собрать эти кортежи в список, вывести его в консоль.

5. Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры два словаря, где ключом является строка, значением — целое число или число с плавающей точкой. Вывести в консоль. Найти пересечения множеств значений словарей. Создать новый словарь, содержащий только те пары ключ-значение, значения из которых входит в пересечение. Вывести в консоль.

[Ссылка на документацию функции `random`](https://docs.python.org/3/library/random.html)

[Built-in Types](https://docs.python.org/3/library/stdtypes.html?highlight=tuple#tuple)

## Задание 1
"""

import random
def generate_list(k): #Определяется функция generate_list, которая принимает один параметр k (размер списка).
  return [random.randrange(0, 10) for _ in range(k)]  #Генератор [random.randrange(0, 10) for _ in range(k)] создает список из k случайных чисел.
u = generate_list(8) #Создается список u длиной 8, содержащий случайные числа от 0 до 9, путем вызова функции generate_list.
print(u)
print(list(reversed(u)))    #Функция reversed(u) возвращает итератор, который перебирает элементы списка u в обратном порядке.
                         #Обертывание в list() преобразует этот итератор в новый список.
                     #Функция print() выводит перевернутый список в консоль.


###  ВАРИАНТ ДРУГОЙ ###
list1 = [random.randint(1, 100) for _ in range(5)]
print("Cписок:", list1)

list1.reverse()
print("Перевернутый список:", list1)

"""## Задание 2"""

# Сгенерируем два списка случайных целых чисел
list1 = [random.randint(1, 100) for _ in range(10)]    #randint — это функция из модуля random.
                                                       #Она используется для генерации случайного целого числа из указанного диапазона.
list2 = [random.randint(1, 100) for _ in range(10)]
print("Первый список:", list1)
print("Второй список:", list2)
# Создаем новый список, добавляя четные элементы из первого и нечетные из второго
new_list = [list1[i] for i in range(len(list1)) if i % 2 == 0] + \     # на четных позициях
           [list2[i] for i in range(len(list2)) if i % 2 != 0]         # на нечетных позициях
 # Здесь + выполняет операцию объединения двух списков,
 # а обратный слэш \ указывает Python, что строка продолжается на следующей строке.
print("Новый список:", new_list)

"""## Задание 3"""

# Генерация списка произвольных элементов
lst = [
    random.randint(0, 100),  # случайное целое число от 0 до 100
    12.34,                   # число с плавающей точкой
    "hello",                 # строка
    12.34,                   # еще одно число с плавающей точкой (дублируется)
    "world",                 # еще одна строка
    random.randint(0, 100)   # еще одно случайное целое число от 0 до 100
]
print("Исходный список:", lst)
# Убираем дубликаты
unique_lst = list(set(lst))   # set(lst): Преобразует список lst во множество (set).
                              # Множество автоматически удаляет все дубликаты, так как в нём хранятся только уникальные элементы.
                              # list(set(lst)): Преобразует множество обратно в список. Это необходимо, если нужен именно список, а не множество.
print("Список без дубликатов:", unique_lst)

"""## Задание 4"""

# Генерация словаря. Cловарь имеет несколько ключей с одинаковые значения.
d = {
    "key1": 10,
    "key2": 20,
    "key3": 10,
    "key4": 30,
    "key5": 20
}
print("Исходный словарь:", d)
# Собираем кортежи
value_dict = {}       # Создание пустого словаря
for key, value in d.items():  # Этот цикл перебирает все пары "ключ-значение" из исходного словаря d.
                              # Метод .items() возвращает пару (ключ, значение) для каждого элемента словаря.
    if value not in value_dict:  # Это условие проверяет, существует ли уже такое значение
        value_dict[value] = []   # (например, 10, 20, или 30) в value_dict в качестве ключа:
    value_dict[value].append(key)  # Добавление текущего ключа в список
       # Например, если текущее значение value — это 10, то в список, ассоциированный с этим значением,
       # добавляется ключ key1 или key3.


# Преобразуем в список кортежей
result = [(value, keys) for value, keys in value_dict.items()]
# for value, keys in value_dict.items() — чтобы распаковать каждую пару (ключ, значение) из словаря.
# В генераторном выражении (value, keys) — чтобы сформировать новый кортеж с каждым значением
# и его списком ключей, который мы добавляем в результат.
print("Результат:", result)

"""## Задание 5"""

# Генерация двух словарей
d1 = {"key1": 10, "key2": 20, "key3": 30}
d2 = {"keyA": 20, "keyB": 30, "keyC": 40}
print("Первый словарь:", d1)
print("Второй словарь:", d2)
# Пересечение значений
c_values = set(d1.values()) & set(d2.values()) # set(d1.values()) — это преобразование значений из первого словаря d1
                                   # в множество (set). Множество избавляет от повторений, и получается: {10, 20, 30}.
# Создаем новый словарь с пересекающимися значениями. Аналогично с d2.
# Оператор & на множествах означает пересечение. Это даст нам те элементы, которые есть в обоих множествах:
                                                  # Пересечение {10, 20, 30} & {20, 30, 40} даёт {20, 30}.
c_dict = {key: value for key, value in d1.items() if value in c_values}
print("Новый словарь с пересечением значений:", c_dict)